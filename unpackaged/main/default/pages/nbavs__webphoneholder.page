<apex:page id="natterboxCTI" Controller="nbavs.WebphoneAutoLoadController" showHeader="false" sideBar="false" >
    <apex:slds rendered="{!ctiUITheme == 'slds' || ctiUITheme == 'freedom'}"/>
    <script type="text/javascript" src="/support/api/51.0/interaction.js"/>
    <script type="text/javascript" src="/support/api/51.0/lightning/opencti_min.js"/>
    <script type="text/javascript" src="/support/console/51.0/integration.js"/>
    <apex:includeScript value="{!URLFOR($Resource.nbavs__DataTables, 'jQuery-3.6.0/jquery-3.6.0.min.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.nbavs__dialListStyles)}"/>

    <apex:pageMessages id="messages" />

        <apex:outputPanel id="webPhonePanel" layout="block" rendered="{!!ctiAvailable}" styleClass="webPhonePanel">
            <apex:outputPanel id="webPhoneAvailable" rendered="{!webPhoneAvailable && webPhoneEnabled}" layout="block">
                <apex:outputPanel id="rmWebPhone" layout="block">
                    <form id="webPhoneIFrameHiddenForm" target="webPhoneIFrame" action="{!JSENCODE(webphoneHost)}/natterbox/phone.php" method="POST">
                        <input type="text" name="authToken" value="{!authToken}" />
                        <input type="text" name="hidden" value="1" />
                        <input type="submit" />
                    </form>
                    <iframe id="webPhoneIFrame" name="webPhoneIFrame" style="width:100%; height:340px; border:0" scrolling="no" src="">
                    </iframe>
                    <script type="text/javascript">
                        //hide webPhoneIFrame form and submit
                        var form = document.getElementById("webPhoneIFrameHiddenForm");
                        form.style.display = "none";
                        form.submit();
                        //init webPhoneIFrame auto resize
                        var iFrameOrigin = form.action.split('/').slice(0,3).join('/');
                        setTimeout(function(){ iFrameResize({log:false,checkOrigin:[iFrameOrigin]}, '#webPhoneIFrame'); }, 2000);
                        setTimeout(function(){ iFrameBlockFix('#webPhoneIFrame'); }, 1000);
                    </script>
                </apex:outputPanel>
            </apex:outputPanel>
            <apex:outputPanel id="webPhoneNotAvailable" layout="block" rendered="{!!(webPhoneAvailable && webPhoneEnabled)}" styleClass="webPhoneNotAvailable" style="text-align:center">
                <apex:outputLabel Value="Webphone not available for current user." rendered="{!webPhoneEnabled}"/>
                <apex:form id="enableWebphoneForm">
                    <apex:commandButton action="{!enableWebPhone}" value="Web Phone Disabled" rendered="{!!webPhoneEnabled}" reRender="webPhonePanel,messages"/>
                </apex:form>
            </apex:outputPanel>
            <apex:outputPanel id="rmWebPhoneResizer">
                <script type="text/javascript">
                            //init panel colapse
                            setTimeout(function(){ setWebPhonePanelHeight(32); }, 2000);
                        </script>
            </apex:outputPanel>
        </apex:outputPanel>

        <apex:outputPanel id="ctiPanel" layout="block" rendered="{!ctiLicensed}" styleClass="no-keypad no-mute hidden-support diallist-apexrest-freedom">
            <script type="text/javascript" src="{!JSENCODE(ctiFileHost)}/dojo.js"></script>
            <link rel="stylesheet" type="text/css" href="{!JSENCODE(ctiFileHost)}/cti.css"/>
            <script type="text/javascript">
                if (typeof cticonfig != 'undefined')
                {
                    cticonfig.cometdURL="{!JSENCODE(ctiHost)}/cometd";
                    cticonfig.salesforce_sid="{!apexSessionId}";
                    cticonfig.salesforce_profileid="{!profileId}";
                    cticonfig.ctiFileHost="{!JSENCODE(ctiFileHost)}";
                    cticonfig.uiTheme="{!JSENCODE(ctiUITheme)}";
                    cticonfig.namespacePrefix="{!JSENCODE(autoNamespacePrefix)}";
                    cticonfig.nbccNamespace="{!JSENCODE(NbccNamespace)}";
                    cticonfig.webphoneHost="{!JSENCODE(webphoneHost)}";
                    cticonfig.dontSendSFSessionIDToCTIHost={!ctiDontSendSFSessionIDToCTIHost};
                    if (cticonfig.dontSendSFSessionIDToCTIHost) {
                        cticonfig.salesforce_userid="{!userId}";
                        cticonfig.salesforce_orgid="{!orgId}";
                        cticonfig.salesforce_language="{!language}";
                        cticonfig.salesforce_locale="{!locale}";
                    }
                }
           </script>
            <div id="cti-container">

                <div id="cti-auth-approval"></div>

                <apex:outputPanel id="CTI_webPhonePanel" layout="block" rendered="{!ctiAvailable}">
                    <apex:outputPanel id="CTI_webPhoneAvailable" rendered="{!webPhoneAvailable && webPhoneEnabled}" layout="block">
                        <apex:outputPanel id="CTI_rmWebPhone" layout="block">
                            <form id="CTI_webPhoneIFrameHiddenForm" target="CTI_webPhoneIFrame" action="{!JSENCODE(webphoneHost)}/natterbox/phone.php" method="POST">
                                <input type="text" name="authToken" value="{!authToken}" />
                                <input type="text" name="hidden" value="1" />
                                <input type="submit" />
                            </form>
                            <iframe id="CTI_webPhoneIFrame" name="CTI_webPhoneIFrame" style="width:100%; height:0px; border:0" scrolling="no" src="">
                            </iframe>
                            <script type="text/javascript">
                                //hide CTI_webPhoneIFrame form and submit
                                var form = document.getElementById("CTI_webPhoneIFrameHiddenForm");
                                form.style.display = "none";
                                form.submit();
                                //init CTI_webPhoneIFrame auto resize
                                var iFrameOrigin = form.action.split('/').slice(0,3).join('/');
                                setTimeout(function(){ iFrameResize({log:false,checkOrigin:[iFrameOrigin]}, '#CTI_webPhoneIFrame'); }, 2000);
                                setTimeout(function(){ iFrameBlockFix('#CTI_webPhoneIFrame'); }, 1000);
                            </script>
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:outputPanel>

                <apex:outputPanel id="dialListPanel" layout="block" rendered="{!dialListEnabled && (ctiUITheme != 'freedom' || !lightningExperience)}"
                                  styleClass="{!IF(ctiUITheme == 'slds','slds-form-element' + IF(lightningExperience, ' dl-in-lightning', ''), '')}">

                    <apex:form id="dialListForm">

                        <apex:actionFunction action="{!setDialListButtonData}" name="setDialListButtonData"
                                             reRender="dialListDial">
                            <apex:param name="label" assignTo="{!dialListButtonLabel}" value=""/>
                            <apex:param name="style" assignTo="{!dialListButtonDisabled}" value=""/>
                        </apex:actionFunction>

                        <div id="dialListFormControl"
                             class="{!IF(ctiUITheme == 'slds', 'slds-form-element__control', '')}">
                            <apex:actionFunction name="rerenderDialListPanel" rerender="messages,dialListPanel"/>
                            <apex:outputText id="dialListPanelLabel" value="Dial List:"/>
                            <apex:selectList id="dialListSelect" value="{!selectedDialListId}" size="1">
                                <apex:selectOptions value="{!dialListOptions}"/>
                                <apex:actionSupport event="onchange" action="{!setUserDialList}"
                                                    reRender="messages,dialListPanel"/>
                            </apex:selectList>
                        </div>
                        <div id="dialListFormControl"
                             class="{!'dialListButtons' + IF(ctiUITheme == 'slds', ' slds-form-element__control', '')}">
                            <apex:commandButton styleClass="{!IF(ctiUITheme == 'slds' && lightningExperience, 'slds-button slds-button_neutral', '')}"
                                    id="dialListPreview" value="Preview"
                                    onclick="previewDialItem(); disableElement(this); return false;"
                                    rendered="{!renderPreviewButton}"/>
                            <apex:commandButton styleClass="{!IF(ctiUITheme == 'slds' && lightningExperience, 'slds-button slds-button_neutral', '')}"
                                    id="dialListDiscardPreview" value="Discard" rendered="{!renderDiscardButton}"
                                    action="{!discardPreviewDialItem}" reRender="messages,dialListPanel"/>
                            <apex:commandButton styleClass="{!'diallerCallButton' + IF(ctiUITheme == 'slds' && lightningExperience, ' slds-button slds-button_neutral', '')}"
                                    id="dialListDial" value="{!dialListButtonLabel}"
                                    disabled="{!dialListButtonDisabled}"
                                    onclick="selectDialItem(); return false;"
                                    rendered="{!selectedDialListId!=''}"/>
                        </div>

                    </apex:form>
                    <script type="text/javascript">
                       var ctiThemeVar = {!JSENCODE(ctiUITheme)};
                       var ctiUIThemeSLDSVar = {!JSENCODE(ctiUIThemeSLDS)};
                       var ctiUIThemeFreedomVar = {!JSENCODE(ctiUIThemeSLDS)};

                        if ({ctiUIThemeVar == ctiUIThemeSLDSVar || (ctiUIThemeVar == ctiUIThemeFreedomVar && !lightningExperience)}) {
                            // this code adds slds css classes. the dl-in-lightning class is used to
                            // select styling when we are running in lightning rather than classic.
                            document.getElementById('natterboxCTI:dialListPanel').className = ({!lightningExperience}) ? 'slds-form-element dl-in-lightning' : 'slds-form-element';
                            var formControl = document.querySelectorAll('#dialListFormControl');
                            for (var i = 0; i < formControl.length; ++i) {
                                formControl[i].className = formControl[i].className + ' slds-form-element__control';
                            }
                            document.getElementById('natterboxCTI:dialListForm:dialListPanelLabel').className = 'slds-form-element__label';
                            document.getElementById('natterboxCTI:dialListForm:dialListSelect').className = 'slds-select';
                            document.getElementById('natterboxCTI:dialListForm:dialListSelect').removeAttribute('size');
                            if ({!lightningExperience}) {
                                var buttons = document.querySelectorAll('#dialListFormControl input');
                                for (var i = 0; i < buttons.length; ++i) {
                                    buttons[i].className = buttons[i].className + ' slds-button slds-button_neutral';
                                }
                            }
                        }
                    </script>
                </apex:outputPanel>

                <div id="cti-header"> </div>
                <div id="cti-main">
                    <div id="cti-login"></div>
                    <div id="cti-render"></div>
                    <div id="cti-info"></div>
                </div>
                <div id="cti-footer"> </div>
            </div>

        </apex:outputPanel>

    <style>
        div #cti-panel-keypad-webphone
        {
            padding: 6px 6px 2px 6px;
            height: 160px;
        }

        #cti-panel-keypad-webphone div
        {
            float: left;
            width: 56px;
        }
    </style>
    <script type="text/javascript">

    j$ = jQuery.noConflict();

    var lightningExperience = {!lightningExperience};
    var namespacePrefix = '{!namespacePrefix}';
    namespacePrefix += (namespacePrefix ? '.' : '');
    var ctiUIThemeVar = '{!JSENCODE(ctiUITheme)}';
    var ctiUIThemeFreedomVar = '{!JSENCODE(ctiUIThemeFreedom)}';

    var iFrameBlockFix = function (iFrameId) {
        if (lightningExperience) {
            setInterval(function(){
                j$(iFrameId).css("display", "");
                setTimeout(function(){ j$(iFrameId).css("display", "block"); }, 1000);
            }, 2000);
        }
    }

    var disableElement = function (element, value) {
        if (element) {
            setTimeout(function(){
                element.disabled = 'disabled';
                // Use the Salesforce CSS style to make the button appear disabled
                element.classList.add('btnDisabled');
                if (value) {
                    element.value = value;
                    }
            }, 50);
            }
        };

    var enableElement = function (element, value) {
        if (element) {
            element.disabled = false;
            element.classList.remove('btnDisabled');
            if (value) {
                element.value = value;
            }
        }
    }

    var popScreen = function (objectId) {
        if (lightningExperience) {
             try {
                if (sforce.opencti) {
                    sforce.opencti.screenPop({type: sforce.opencti.SCREENPOP_TYPE.SOBJECT, params: { recordId: objectId }});
                    }
                } catch (e) {
                    //console.log(e);
                }
        } else {
            try {
                if (sforce.interaction) {
                    sforce.interaction.screenPop('/'+objectId, true);
                 }
            } catch (e) {
                //console.log(e);
            }
        }
    }


    var dialButtonTimer = null;

    function escapeXml(unsafe) {
        if (unsafe == null) return "";
        return unsafe.replace(/[<>&'"]/g, function (c) {
            switch (c) {
                case '<': return '&lt;';
                case '>': return '&gt;';
                case '&': return '&amp;';
                case '\'': return '&apos;';
                case '"': return '&quot;';
            }
        });
    }

    var callSelectedDialItem = function (dialItem) {
        var metadata =
"<variables>\
<DiallerItemId>"+dialItem.id+"</DiallerItemId>\
<DiallerListName>"+escapeXml(dialItem.dialListName)+"</DiallerListName>\
<DiallerListId>"+dialItem.dialListId+"</DiallerListId>\
<DiallerObjectName>"+escapeXml(dialItem.name)+"</DiallerObjectName>\
<DiallerObjectId>"+dialItem.objectId+"</DiallerObjectId>\
</variables>";

        ctisession.dial(dialItem.phone, dialItem.objectId, dialItem.name, dialItem.objectType, dialItem.name, null, null, null, metadata);

        // In Lightning we pop on dial here rather than on call active so it doesn't pop in all tabs.
        // However in Classic we can't do this classic popping here causes a complete page reload
        // which means we may miss the natterbox:cti:callbegin event (and item won't get marked as active)
        if (lightningExperience) {
        	popScreen(dialItem.objectId);
        }

        dialButtonTimer = setTimeout(function(){
            dialButtonTimer = null;
            setDialListButtonData('Dial', false);
        }, 3000);
    }


    window.addEventListener("natterbox:cti:callbegin", function (e) {
        console.log('Call begin event: '+JSON.stringify(e.detail));
        if ((dialButtonTimer != null) && e.detail.diallistitem) {
            clearTimeout(dialButtonTimer);
            dialButtonTimer = null;
        }
        setCallBegin(e.detail);
        if (e.detail.diallistitem && (ctiUIThemeVar != ctiUIThemeFreedomVar || !lightningExperience) && typeof setDialListButtonData == 'function') {
            setDialListButtonData('Call Active', true);
        }
    });

    window.addEventListener("natterbox:cti:callend", function (e) {
        console.log('Call end event: '+JSON.stringify(e.detail));
        setCallEnd(e.detail);
        if (e.detail.diallistitem && (ctiUIThemeVar != ctiUIThemeFreedomVar || !lightningExperience) && typeof setDialListButtonData == 'function') {
            setDialListButtonData('Dial', false);
        }
    });

    window.addEventListener("natterbox:cti:deviceupdate", function (e) {
        console.log('Device update event: '+JSON.stringify(e.detail));
        deviceUpdate(e.detail);
    });

    var classicCallbackLogError = function (response) {
        if (response.error) {
            console.log("runApex failed: "+JSON.stringify(response));
        }
    };

    var setCallBegin = function (data) {
        try {
            callRunApex('CallHandler', 'saveCallUUID', 'uuid='+data.calluuid+'', null, null);

            if (data.diallistitem && (ctiUIThemeVar != ctiUIThemeFreedomVar || !lightningExperience)) {
               	callRunApex('DialListWebService', 'activeDialItemWithId', 'uuid='+data.calluuid+'&id='+data.diallistitem.id, onCallBeginClassic, onCallBeginLightning);
            }
        } catch (e) {
            //console.log(e);
        }
    }

    var setCallEnd = function (data) {
        try {
            if (data.diallistitem && (ctiUIThemeVar != ctiUIThemeFreedomVar || !lightningExperience)) {
                callRunApex('DialListWebService', 'completeDialItemWithId', 'uuid='+data.calluuid+'&id='+data.diallistitem.id, null, null );
            }
        } catch (e) {
            //console.log(e);
        }
    }

    var deviceUpdate = function (data) {
        try {
            callRunApex('CTIDeviceUpdateWebService', 'ctiDeviceUpdate', 'natterboxUserId='+data.userid+'&newCtiDeviceRaw='+data.newctidevice, classicCallbackLogError, null );
        } catch (e) {
            //console.log(e);
        }
    }

    var callRunApex = function (apexClass, methodName, methodParams, callbackClassic, callbackLightning) {

        apexClass = namespacePrefix + apexClass;

        if (lightningExperience) {
            try {
                if (sforce.opencti) {
                    sforce.opencti.runApex({apexClass: apexClass, methodName: methodName, methodParams: methodParams, callback: callbackLightning});
                }
            } catch (e) {
                console.log(e);
            }
        } else {
            try {
                if (sforce.interaction) {
                    sforce.interaction.runApex(apexClass, methodName, methodParams, callbackClassic);
                }
            } catch (e) {
                console.log(e);
            }
        }
    }

    var onCallBeginClassic = function (response) {
        if (response.result) {
            popScreen(JSON.parse(response.result).objectId);
        } else {
            //console.log(response.error);
        }
    }

    var onCallBeginLightning = function (response) {
        // Note in Lightning we pop record on dial rather than on call active so that we aren't popping the record in all tabs.
        // This is not possible in Classic since popping causes full page refresh and if this is done on dial the
        // natterbox:cti:callbegin event would likely be missed (and dial list item wouldn't be marked as active)
        /*
        if (response.success) {
            popScreen(JSON.parse(response.returnValue.runApex).objectId)
        } else {
            //console.log(response.errors);
        }*/
    }


    var maximumLockAttempts = 10;
    var previewLockAttempts = 0;
    var selectLockAttempts = 0;
    var previewedDialItem;
    var selectedDialItem;;

    var previewDialItem = function (retry) {
        if (retry != true) {
            previewedDialItem = null;
            previewLockAttempts = 0;
        }
        if (previewLockAttempts++ < maximumLockAttempts) {
            callRunApex('DialListWebService', 'previewDialItem', null, onPreviewDialItemClassic, onPreviewDialItemLightning);
        } else {
            showErrorMessage('Cannot select Dial Item, please try again later.');
        }
    }


    var onPreviewDialItemClassic = function (response) {
        if (response.result) {
            previewedDialItem = JSON.parse(response.result);
            rerenderDialListPanel();
            //screen pop call now
            popScreen(previewedDialItem.objectId);
        } else {
            if (response.error.indexOf('Cannot Lock Dial Item') !== -1) {
                setTimeout(function(){ previewDialItem(true); }, 100);
            } else {
                rerenderDialListPanel();
                showErrorMessage(response.error);
            }
        }
    }

     var onPreviewDialItemLightning = function (response) {
        if (response.success) {
            previewedDialItem = JSON.parse(response.returnValue.runApex);
            rerenderDialListPanel();
            //screen pop call now
            popScreen(previewedDialItem.objectId);
        } else {
            var error = response.errors[0].description;
            if (error.indexOf('Cannot Lock Dial Item') !== -1) {
                setTimeout(function(){ previewDialItem(true); }, 100);
            } else {
                rerenderDialListPanel();
                showErrorMessage(error);
            }
        }
    }


    var selectDialItem = function (retry) {
        if (retry != true) {
            selectedDialItem = null;
            selectLockAttempts = 0;
        }
        if (selectLockAttempts++ < maximumLockAttempts) {
            callRunApex('DialListWebService', 'selectDialItem', null, onSelectDialItemClassic, onSelectDialItemLightning);
        } else {
            showErrorMessage('Cannot select Dial Item, please try again later.');
        }
    }


    var onSelectDialItemClassic = function (response) {
        if (response.result) {
            selectedDialItem = JSON.parse(response.result);
            rerenderDialListPanel();
            //make call now
            callSelectedDialItem(selectedDialItem);
        } else {
            if (response.error.indexOf('Cannot Lock Dial Item') !== -1) {
                setTimeout(function(){ selectDialItem(true); }, 100);
            } else {
                rerenderDialListPanel();
                showErrorMessage(response.error);
            }
        }
    }

     var onSelectDialItemLightning = function (response) {
        if (response.success) {
            setDialListButtonData('Dialling ...', true);
            rerenderDialListPanel();
            selectedDialItem = JSON.parse(response.returnValue.runApex);
            //make call now
            callSelectedDialItem(selectedDialItem);
        } else {
            var error = response.errors[0].description;
            if (error.indexOf('Cannot Lock Dial Item') !== -1) {
                setTimeout(function(){ selectDialItem(true); }, 100);
            } else {
                rerenderDialListPanel();
                showErrorMessage(error);
            }
        }
    }

    var serialize = function serialize( obj ) {
      return Object.keys(obj).reduce(function(a,k){a.push(k+'='+obj[k]);return a},[]).join('&')
    }

    var showErrorMessage = function (message) {
        alert(message.replace('AppException: ','').split('\n')[0]);
    }


    //webphone
    //add messages listeners
    window.addEventListener('message',function(e) {
        var key = e.message ? 'message' : 'data';
        var data = e[key];

        switch (data) {
            case 'nbWebPhoneMasterDown' : popCTIPanel(true); break;
            // CTI already does this on an inbound call
            //case 'nbWebPhoneInboundCall' : popCTIPanel(true); break;
            default: if (typeof data === 'string' && data.indexOf('iFrameSizer') !== -1) {
                var params = data.split(':');
                setWebPhonePanelHeight(params[1]);
                };
            }
        }, false);

    //open cti panel in lightning and console mode
    function popCTIPanel(visible) {

        if (lightningExperience) {
            try {
                if (sforce.opencti && sforce.opencti.isSoftphonePanelVisible && sforce.opencti.setSoftphonePanelVisibility) {
                    sforce.opencti.isSoftphonePanelVisible({callback: function(response) {
                        try {
                            if (response.success && response.returnValue && response.returnValue.visible === false) {
                                sforce.opencti.setSoftphonePanelVisibility({visible: visible, callback: null});
                            }
                        } catch (e) {
                            //console.log(e);
                        }
                    }});
                }
            } catch (e) {
                //console.log(e);
            }
        } else {
             try {
                if (sforce.interaction && sforce.interaction.setVisible) {
                    sforce.interaction.setVisible(visible, null);
                 }
            } catch (e) {
                //console.log(e);
            }
        }
    }

    //adjust cti panel webPhone mode height in lightning and console mode
    function setWebPhonePanelHeight(height) {
        try {
            height = parseInt(height);
            //check webPhone mode
            var webPhonePanel = document.getElementsByClassName('webPhonePanel');
            if (webPhonePanel[0] == null) {
            //let CTI deal with softPhone height
            return;
            }

            if (height != null && height != 0) {

                if (lightningExperience) {
                    try {
                        if (sforce.opencti) {
                            //min / max values for openCTI
                            //height = Math.max(240, height);
                            //height = Math.min(700, height);
                            var softphonePanelHeaderHeight = 42;
                            sforce.opencti.setSoftphonePanelHeight({heightPX: height + softphonePanelHeaderHeight, callback: null});
                        }
                    } catch (e) {
                        //console.log(e);
                    }
                } else {
                    try {
                        if (sforce.interaction) {
                            sforce.interaction.cti.setSoftphoneHeight(height, null);
                         }
                    } catch (e) {
                       //console.log(e);
                    }
                }



             }
        } catch (e) {
            //console.log(e);
        }
    }


    /*
     * File: iframeResizer.js
     * Desc: Force iframes to size to content.
     * Requires: iframeResizer.contentWindow.js to be loaded into the target frame.
     * Doc: https://github.com/davidjbradshaw/iframe-resizer
     * Author: David J. Bradshaw - dave@bradshaw.net
     * Contributor: Jure Mav - jure.mav@gmail.com
     * Contributor: Reed Dadoune - reed@dadoune.com
     */


    ;(function(undefined) {
        'use strict';

        if(typeof window === 'undefined') return; // don't run for server side render

        var
            count                 = 0,
            logEnabled            = false,
            hiddenCheckEnabled    = false,
            msgHeader             = 'message',
            msgHeaderLen          = msgHeader.length,
            msgId                 = '[iFrameSizer]', //Must match iframe msg ID
            msgIdLen              = msgId.length,
            pagePosition          = null,
            requestAnimationFrame = window.requestAnimationFrame,
            resetRequiredMethods  = {max:1,scroll:1,bodyScroll:1,documentElementScroll:1},
            settings              = {},
            timer                 = null,
            logId                 = 'Host Page',

            defaults              = {
                autoResize                : true,
                bodyBackground            : null,
                bodyMargin                : null,
                bodyMarginV1              : 8,
                bodyPadding               : null,
                checkOrigin               : true,
                inPageLinks               : false,
                enablePublicMethods       : true,
                heightCalculationMethod   : 'bodyOffset',
                id                        : 'iFrameResizer',
                interval                  : 32,
                log                       : false,
                maxHeight                 : Infinity,
                maxWidth                  : Infinity,
                minHeight                 : 0,
                minWidth                  : 0,
                resizeFrom                : 'parent',
                scrolling                 : false,
                sizeHeight                : true,
                sizeWidth                 : false,
                warningTimeout            : 5000,
                tolerance                 : 0,
                widthCalculationMethod    : 'scroll',
                closedCallback            : function(){},
                initCallback              : function(){},
                messageCallback           : function(){warn('MessageCallback function not defined');},
                resizedCallback           : function(){},
                scrollCallback            : function(){return true;}
            };

        function addEventListener(obj,evt,func){
            /* istanbul ignore else */ // Not testable in PhantonJS
            if ('addEventListener' in window){
                obj.addEventListener(evt,func, false);
            } else if ('attachEvent' in window){//IE
                obj.attachEvent('on'+evt,func);
            }
        }

        function removeEventListener(el,evt,func){
            /* istanbul ignore else */ // Not testable in phantonJS
            if ('removeEventListener' in window){
                el.removeEventListener(evt,func, false);
            } else if ('detachEvent' in window){ //IE
                el.detachEvent('on'+evt,func);
            }
        }

        function setupRequestAnimationFrame(){
            var
                vendors = ['moz', 'webkit', 'o', 'ms'],
                x;

            // Remove vendor prefixing if prefixed and break early if not
            for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
                requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            }

            if (!(requestAnimationFrame)){
                log('setup','RequestAnimationFrame not supported');
            }
        }

        function getMyID(iframeId){
            var retStr = 'Host page: '+iframeId;

            if (window.top !== window.self){
                if (window.parentIFrame && window.parentIFrame.getId){
                    retStr = window.parentIFrame.getId()+': '+iframeId;
                } else {
                    retStr = 'Nested host page: '+iframeId;
                }
            }

            return retStr;
        }

        function formatLogHeader(iframeId){
            return msgId + '[' + getMyID(iframeId) + ']';
        }

        function isLogEnabled(iframeId){
            return settings[iframeId] ? settings[iframeId].log : logEnabled;
        }

        function log(iframeId,msg){
            output('log',iframeId,msg,isLogEnabled(iframeId));
        }

        function info(iframeId,msg){
            output('info',iframeId,msg,isLogEnabled(iframeId));
        }

        function warn(iframeId,msg){
            output('warn',iframeId,msg,true);
        }

        function output(type,iframeId,msg,enabled){
            if (true === enabled && 'object' === typeof window.console){
                console[type](formatLogHeader(iframeId),msg);
            }
        }

        function iFrameListener(event){
            function resizeIFrame(){
                function resize(){
                    setSize(messageData);
                    setPagePosition(iframeId);
                }

                ensureInRange('Height');
                ensureInRange('Width');

                syncResize(resize,messageData,'init');
            }

            function processMsg(){
                var data = msg.substr(msgIdLen).split(':');

                return {
                    iframe: settings[data[0]].iframe,
                    id:     data[0],
                    height: data[1],
                    width:  data[2],
                    type:   data[3]
                };
            }

            function ensureInRange(Dimension){
                var
                    max  = Number(settings[iframeId]['max' + Dimension]),
                    min  = Number(settings[iframeId]['min' + Dimension]),
                    dimension = Dimension.toLowerCase(),
                    size = Number(messageData[dimension]);

                log(iframeId,'Checking ' + dimension + ' is in range ' + min + '-' + max);

                if (size<min) {
                    size=min;
                    log(iframeId,'Set ' + dimension + ' to min value');
                }

                if (size>max) {
                    size=max;
                    log(iframeId,'Set ' + dimension + ' to max value');
                }

                messageData[dimension] = '' + size;
            }


            function isMessageFromIFrame(){
                function checkAllowedOrigin(){
                    function checkList(){
                        var
                            i = 0,
                            retCode = false;

                        log(iframeId,'Checking connection is from allowed list of origins: ' + checkOrigin);

                        for (; i < checkOrigin.length; i++) {
                            if (checkOrigin[i] === origin) {
                                retCode = true;
                                break;
                            }
                        }
                        return retCode;
                    }

                    function checkSingle(){
                        var remoteHost  = settings[iframeId].remoteHost;
                        log(iframeId,'Checking connection is from: '+remoteHost);
                        return origin === remoteHost;
                    }

                    return checkOrigin.constructor === Array ? checkList() : checkSingle();
                }

                var
                    origin      = event.origin,
                    checkOrigin = settings[iframeId].checkOrigin;

                if (checkOrigin && (''+origin !== 'null') && !checkAllowedOrigin()) {
                    throw new Error(
                        'Unexpected message received from: ' + origin +
                        ' for ' + messageData.iframe.id +
                        '. Message was: ' + event.data +
                        '. This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains.'
                    );
                }

                return true;
            }

            function isMessageForUs(){
                return msgId === (('' + msg).substr(0,msgIdLen)) && (msg.substr(msgIdLen).split(':')[0] in settings); //''+Protects against non-string msg
            }

            function isMessageFromMetaParent(){
                //Test if this message is from a parent above us. This is an ugly test, however, updating
                //the message format would break backwards compatibity.
                var retCode = messageData.type in {'true':1,'false':1,'undefined':1};

                if (retCode){
                    log(iframeId,'Ignoring init message from meta parent page');
                }

                return retCode;
            }

            function getMsgBody(offset){
                return msg.substr(msg.indexOf(':')+msgHeaderLen+offset);
            }

            function forwardMsgFromIFrame(msgBody){
                log(iframeId,'MessageCallback passed: {iframe: '+ messageData.iframe.id + ', message: ' + msgBody + '}');
                callback('messageCallback',{
                    iframe: messageData.iframe,
                    message: JSON.parse(msgBody)
                });
                log(iframeId,'--');
            }

            function getPageInfo(){
                var
                    bodyPosition   = document.body.getBoundingClientRect(),
                    iFramePosition = messageData.iframe.getBoundingClientRect();

                return JSON.stringify({
                    iframeHeight: iFramePosition.height,
                    iframeWidth:  iFramePosition.width,
                    clientHeight: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
                    clientWidth:  Math.max(document.documentElement.clientWidth,  window.innerWidth  || 0),
                    offsetTop:    parseInt(iFramePosition.top  - bodyPosition.top,  10),
                    offsetLeft:   parseInt(iFramePosition.left - bodyPosition.left, 10),
                    scrollTop:    window.pageYOffset,
                    scrollLeft:   window.pageXOffset
                });
            }

            function sendPageInfoToIframe(iframe,iframeId){
                function debouncedTrigger(){
                    trigger(
                        'Send Page Info',
                        'pageInfo:' + getPageInfo(),
                        iframe,
                        iframeId
                    );
                }

                debouce(debouncedTrigger,32);
            }


            function startPageInfoMonitor(){
                function setListener(type,func){
                    function sendPageInfo(){
                        if (settings[id]){
                            sendPageInfoToIframe(settings[id].iframe,id);
                        } else {
                            stop();
                        }
                    }

                    ['scroll','resize'].forEach(function(evt){
                        log(id, type +  evt + ' listener for sendPageInfo');
                        func(window,evt,sendPageInfo);
                    });
                }

                function stop(){
                    setListener('Remove ', removeEventListener);
                }

                function start(){
                    setListener('Add ', addEventListener);
                }

                var id = iframeId; //Create locally scoped copy of iFrame ID

                start();

                settings[id].stopPageInfo = stop;
            }

            function stopPageInfoMonitor(){
                if (settings[iframeId] && settings[iframeId].stopPageInfo){
                    settings[iframeId].stopPageInfo();
                    delete settings[iframeId].stopPageInfo;
                }
            }

            function checkIFrameExists(){
                var retBool = true;

                if (null === messageData.iframe) {
                    warn(iframeId,'IFrame ('+messageData.id+') not found');
                    retBool = false;
                }
                return retBool;
            }

            function getElementPosition(target){
                var iFramePosition = target.getBoundingClientRect();

                getPagePosition(iframeId);

                return {
                    x: Math.floor( Number(iFramePosition.left) + Number(pagePosition.x) ),
                    y: Math.floor( Number(iFramePosition.top)  + Number(pagePosition.y) )
                };
            }

            function scrollRequestFromChild(addOffset){
                /* istanbul ignore next */  //Not testable in Karma
                function reposition(){
                    pagePosition = newPosition;
                    scrollTo();
                    log(iframeId,'--');
                }

                function calcOffset(){
                    return {
                        x: Number(messageData.width) + offset.x,
                        y: Number(messageData.height) + offset.y
                    };
                }

                function scrollParent(){
                    if (window.parentIFrame){
                        window.parentIFrame['scrollTo'+(addOffset?'Offset':'')](newPosition.x,newPosition.y);
                    } else {
                        warn(iframeId,'Unable to scroll to requested position, window.parentIFrame not found');
                    }
                }

                var
                    offset = addOffset ? getElementPosition(messageData.iframe) : {x:0,y:0},
                    newPosition = calcOffset();

                log(iframeId,'Reposition requested from iFrame (offset x:'+offset.x+' y:'+offset.y+')');

                if(window.top !== window.self){
                    scrollParent();
                } else {
                    reposition();
                }
            }

            function scrollTo(){
                if (false !== callback('scrollCallback',pagePosition)){
                    setPagePosition(iframeId);
                } else {
                    unsetPagePosition();
                }
            }

            function findTarget(location){
                function jumpToTarget(){
                    var jumpPosition = getElementPosition(target);

                    log(iframeId,'Moving to in page link (#'+hash+') at x: '+jumpPosition.x+' y: '+jumpPosition.y);
                    pagePosition = {
                        x: jumpPosition.x,
                        y: jumpPosition.y
                    };

                    scrollTo();
                    log(iframeId,'--');
                }

                function jumpToParent(){
                    if (window.parentIFrame){
                        window.parentIFrame.moveToAnchor(hash);
                    } else {
                        log(iframeId,'In page link #'+hash+' not found and window.parentIFrame not found');
                    }
                }

                var
                    hash     = location.split('#')[1] || '',
                    hashData = decodeURIComponent(hash),
                    target   = document.getElementById(hashData) || document.getElementsByName(hashData)[0];

                if (target){
                    jumpToTarget();
                } else if(window.top!==window.self){
                    jumpToParent();
                } else {
                    log(iframeId,'In page link #'+hash+' not found');
                }
            }

            function callback(funcName,val){
                return chkCallback(iframeId,funcName,val);
            }

            function actionMsg(){

                if(settings[iframeId].firstRun) firstRun();

                switch(messageData.type){
                case 'close':
                    closeIFrame(messageData.iframe);
                    break;
                case 'message':
                    forwardMsgFromIFrame(getMsgBody(6));
                    break;
                case 'scrollTo':
                    scrollRequestFromChild(false);
                    break;
                case 'scrollToOffset':
                    scrollRequestFromChild(true);
                    break;
                case 'pageInfo':
                    sendPageInfoToIframe(settings[iframeId].iframe,iframeId);
                    startPageInfoMonitor();
                    break;
                case 'pageInfoStop':
                    stopPageInfoMonitor();
                    break;
                case 'inPageLink':
                    findTarget(getMsgBody(9));
                    break;
                case 'reset':
                    resetIFrame(messageData);
                    break;
                case 'init':
                    resizeIFrame();
                    callback('initCallback',messageData.iframe);
                    callback('resizedCallback',messageData);
                    break;
                default:
                    resizeIFrame();
                    callback('resizedCallback',messageData);
                }
            }

            function hasSettings(iframeId){
                var retBool = true;

                if (!settings[iframeId]){
                    retBool = false;
                    warn(messageData.type + ' No settings for ' + iframeId + '. Message was: ' + msg);
                }

                return retBool;
            }

            function iFrameReadyMsgReceived(){
                for (var iframeId in settings){
                    trigger('iFrame requested init',createOutgoingMsg(iframeId),document.getElementById(iframeId),iframeId);
                }
            }

            function firstRun() {
                settings[iframeId].firstRun = false;
            }

            var
                msg = event.data,
                messageData = {},
                iframeId = null;

            if('[iFrameResizerChild]Ready' === msg){
                iFrameReadyMsgReceived();
            } else if (isMessageForUs()){
                messageData = processMsg();
                iframeId    = logId = messageData.id;

                clearTimeout(settings[iframeId].msgTimeout);

                if (!isMessageFromMetaParent() && hasSettings(iframeId)){
                    log(iframeId,'Received: '+msg);

                    if ( checkIFrameExists() && isMessageFromIFrame() ){
                        actionMsg();
                    }
                }
            } else {
                info(iframeId,'Ignored: '+msg);
            }

        }


        function chkCallback(iframeId,funcName,val){
            var
                func = null,
                retVal = null;

            if(settings[iframeId]){
                func = settings[iframeId][funcName];

                if( 'function' === typeof func){
                    retVal = func(val);
                } else {
                    throw new TypeError(funcName+' on iFrame['+iframeId+'] is not a function');
                }
            }

            return retVal;
        }

        function closeIFrame(iframe){
            var iframeId = iframe.id;

            log(iframeId,'Removing iFrame: '+iframeId);
            if (iframe.parentNode) { iframe.parentNode.removeChild(iframe); }
            chkCallback(iframeId,'closedCallback',iframeId);
            log(iframeId,'--');
            delete settings[iframeId];
        }

        function getPagePosition(iframeId){
            if(null === pagePosition){
                pagePosition = {
                    x: (window.pageXOffset !== undefined) ? window.pageXOffset : document.documentElement.scrollLeft,
                    y: (window.pageYOffset !== undefined) ? window.pageYOffset : document.documentElement.scrollTop
                };
                log(iframeId,'Get page position: '+pagePosition.x+','+pagePosition.y);
            }
        }

        function setPagePosition(iframeId){
            if(null !== pagePosition){
                window.scrollTo(pagePosition.x,pagePosition.y);
                log(iframeId,'Set page position: '+pagePosition.x+','+pagePosition.y);
                unsetPagePosition();
            }
        }

        function unsetPagePosition(){
            pagePosition = null;
        }

        function resetIFrame(messageData){
            function reset(){
                setSize(messageData);
                trigger('reset','reset',messageData.iframe,messageData.id);
            }

            log(messageData.id,'Size reset requested by '+('init'===messageData.type?'host page':'iFrame'));
            getPagePosition(messageData.id);
            syncResize(reset,messageData,'reset');
        }

        function setSize(messageData){
            function setDimension(dimension){
                messageData.iframe.style[dimension] = messageData[dimension] + 'px';
                log(
                    messageData.id,
                    'IFrame (' + iframeId +
                    ') ' + dimension +
                    ' set to ' + messageData[dimension] + 'px'
                );
            }

            function chkZero(dimension){
                //FireFox sets dimension of hidden iFrames to zero.
                //So if we detect that set up an event to check for
                //when iFrame becomes visible.

                /* istanbul ignore next */  //Not testable in PhantomJS
                if (!hiddenCheckEnabled && '0' === messageData[dimension]){
                    hiddenCheckEnabled = true;
                    log(iframeId,'Hidden iFrame detected, creating visibility listener');
                    fixHiddenIFrames();
                }
            }

            function processDimension(dimension){
                setDimension(dimension);
                chkZero(dimension);
            }

            var iframeId = messageData.iframe.id;

            if(settings[iframeId]){
                if( settings[iframeId].sizeHeight) { processDimension('height'); }
                if( settings[iframeId].sizeWidth ) { processDimension('width'); }
            }
        }

        function syncResize(func,messageData,doNotSync){
            /* istanbul ignore if */  //Not testable in PhantomJS
            if(doNotSync!==messageData.type && requestAnimationFrame){
                log(messageData.id,'Requesting animation frame');
                requestAnimationFrame(func);
            } else {
                func();
            }
        }

        function trigger(calleeMsg, msg, iframe, id, noResponseWarning) {
            function postMessageToIFrame(){
                var target = settings[id].targetOrigin;
                log(id,'[' + calleeMsg + '] Sending msg to iframe['+id+'] ('+msg+') targetOrigin: '+target);
                iframe.contentWindow.postMessage( msgId + msg, target );
            }

            function iFrameNotFound(){
                warn(id,'[' + calleeMsg + '] IFrame('+id+') not found');
            }

            function chkAndSend(){
                if(iframe && 'contentWindow' in iframe && (null !== iframe.contentWindow)){ //Null test for PhantomJS
                    postMessageToIFrame();
                } else {
                    iFrameNotFound();
                }
            }

            function warnOnNoResponse() {

                function warning() {
                    warn(id, 'No response from iFrame. Check iFrameResizer.contentWindow.js has been loaded in iFrame');
                }

                if (!!noResponseWarning) {
                    settings[id].msgTimeout = setTimeout(warning, settings[id].warningTimeout);

                }
            }


            id = id || iframe.id;

            if(settings[id]) {
                chkAndSend();
                warnOnNoResponse();
            }

        }

        function createOutgoingMsg(iframeId){
            return iframeId +
                ':' + settings[iframeId].bodyMarginV1 +
                ':' + settings[iframeId].sizeWidth +
                ':' + settings[iframeId].log +
                ':' + settings[iframeId].interval +
                ':' + settings[iframeId].enablePublicMethods +
                ':' + settings[iframeId].autoResize +
                ':' + settings[iframeId].bodyMargin +
                ':' + settings[iframeId].heightCalculationMethod +
                ':' + settings[iframeId].bodyBackground +
                ':' + settings[iframeId].bodyPadding +
                ':' + settings[iframeId].tolerance +
                ':' + settings[iframeId].inPageLinks +
                ':' + settings[iframeId].resizeFrom +
                ':' + settings[iframeId].widthCalculationMethod;
        }

        function setupIFrame(iframe,options){
            function setLimits(){
                function addStyle(style){
                    if ((Infinity !== settings[iframeId][style]) && (0 !== settings[iframeId][style])){
                        iframe.style[style] = settings[iframeId][style] + 'px';
                        log(iframeId,'Set '+style+' = '+settings[iframeId][style]+'px');
                    }
                }

                function chkMinMax(dimension){
                    if (settings[iframeId]['min'+dimension]>settings[iframeId]['max'+dimension]){
                        throw new Error('Value for min'+dimension+' can not be greater than max'+dimension);
                    }
                }

                chkMinMax('Height');
                chkMinMax('Width');

                addStyle('maxHeight');
                addStyle('minHeight');
                addStyle('maxWidth');
                addStyle('minWidth');
            }

            function newId(){
                var id = ((options && options.id) || defaults.id + count++);
                if  (null !== document.getElementById(id)){
                    id = id + count++;
                }
                return id;
            }

            function ensureHasId(iframeId){
                logId=iframeId;
                if (''===iframeId){
                    iframe.id = iframeId =  newId();
                    logEnabled = (options || {}).log;
                    logId=iframeId;
                    log(iframeId,'Added missing iframe ID: '+ iframeId +' (' + iframe.src + ')');
                }


                return iframeId;
            }

            function setScrolling(){
                log(iframeId,'IFrame scrolling ' + (settings[iframeId].scrolling ? 'enabled' : 'disabled') + ' for ' + iframeId);
                iframe.style.overflow = false === settings[iframeId].scrolling ? 'hidden' : 'auto';
                switch(settings[iframeId].scrolling) {
                    case true:
                        iframe.scrolling = 'yes';
                        break;
                    case false:
                        iframe.scrolling = 'no';
                        break;
                    default:
                        iframe.scrolling = settings[iframeId].scrolling;
                }
            }

            //The V1 iFrame script expects an int, where as in V2 expects a CSS
            //string value such as '1px 3em', so if we have an int for V2, set V1=V2
            //and then convert V2 to a string PX value.
            function setupBodyMarginValues(){
                if (('number'===typeof(settings[iframeId].bodyMargin)) || ('0'===settings[iframeId].bodyMargin)){
                    settings[iframeId].bodyMarginV1 = settings[iframeId].bodyMargin;
                    settings[iframeId].bodyMargin   = '' + settings[iframeId].bodyMargin + 'px';
                }
            }

            function checkReset(){
                // Reduce scope of firstRun to function, because IE8's JS execution
                // context stack is borked and this value gets externally
                // changed midway through running this function!!!
                var
                    firstRun           = settings[iframeId].firstRun,
                    resetRequertMethod = settings[iframeId].heightCalculationMethod in resetRequiredMethods;

                if (!firstRun && resetRequertMethod){
                    resetIFrame({iframe:iframe, height:0, width:0, type:'init'});
                }
            }

            function setupIFrameObject(){
                if(Function.prototype.bind){ //Ignore unpolyfilled IE8.
                    settings[iframeId].iframe.iFrameResizer = {

                        close        : closeIFrame.bind(null,settings[iframeId].iframe),

                        resize       : trigger.bind(null,'Window resize', 'resize', settings[iframeId].iframe),

                        moveToAnchor : function(anchor){
                            trigger('Move to anchor','moveToAnchor:'+anchor, settings[iframeId].iframe,iframeId);
                        },

                        sendMessage  : function(message){
                            message = JSON.stringify(message);
                            trigger('Send Message','message:'+message, settings[iframeId].iframe, iframeId);
                        }
                    };
                }
            }

            //We have to call trigger twice, as we can not be sure if all
            //iframes have completed loading when this code runs. The
            //event listener also catches the page changing in the iFrame.
            function init(msg){
                function iFrameLoaded(){
                    trigger('iFrame.onload', msg, iframe, undefined , true);
                    checkReset();
                }

                addEventListener(iframe,'load',iFrameLoaded);
                trigger('init', msg, iframe, undefined, true);
            }

            function checkOptions(options){
                if ('object' !== typeof options){
                    throw new TypeError('Options is not an object');
                }
            }

            function copyOptions(options){
                for (var option in defaults) {
                    if (defaults.hasOwnProperty(option)){
                        settings[iframeId][option] = options.hasOwnProperty(option) ? options[option] : defaults[option];
                    }
                }
            }

            function getTargetOrigin (remoteHost){
                return ('' === remoteHost || 'file://' === remoteHost) ? '*' : remoteHost;
            }

            function processOptions(options){
                options = options || {};
                settings[iframeId] = {
                    firstRun    : true,
                    iframe      : iframe,
                    remoteHost  : iframe.src.split('/').slice(0,3).join('/')
                };

                checkOptions(options);
                copyOptions(options);

                settings[iframeId].targetOrigin = true === settings[iframeId].checkOrigin ? getTargetOrigin(settings[iframeId].remoteHost) : '*';
            }

            function beenHere(){
                return (iframeId in settings && 'iFrameResizer' in iframe);
            }

            var iframeId = ensureHasId(iframe.id);

            if (!beenHere()){
                processOptions(options);
                setScrolling();
                setLimits();
                setupBodyMarginValues();
                init(createOutgoingMsg(iframeId));
                setupIFrameObject();
            } else {
                warn(iframeId,'Ignored iFrame, already setup.');
            }
        }

        function debouce(fn,time){
            if (null === timer){
                timer = setTimeout(function(){
                    timer = null;
                    fn();
                }, time);
            }
        }

        /* istanbul ignore next */  //Not testable in PhantomJS
        function fixHiddenIFrames(){
            function checkIFrames(){
                function checkIFrame(settingId){
                    function chkDimension(dimension){
                        return '0px' === settings[settingId].iframe.style[dimension];
                    }

                    function isVisible(el) {
                        return (null !== el.offsetParent);
                    }

                    if (isVisible(settings[settingId].iframe) && (chkDimension('height') || chkDimension('width'))){
                        trigger('Visibility change', 'resize', settings[settingId].iframe, settingId);
                    }
                }

                for (var settingId in settings){
                    checkIFrame(settingId);
                }
            }

            function mutationObserved(mutations){
                log('window','Mutation observed: ' + mutations[0].target + ' ' + mutations[0].type);
                debouce(checkIFrames,16);
            }

            function createMutationObserver(){
                var
                    target = document.querySelector('body'),

                    config = {
                        attributes            : true,
                        attributeOldValue     : false,
                        characterData         : true,
                        characterDataOldValue : false,
                        childList             : true,
                        subtree               : true
                    },

                    observer = new MutationObserver(mutationObserved);

                observer.observe(target, config);
            }

            var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;

            if (MutationObserver) createMutationObserver();
        }


        function resizeIFrames(event){
            function resize(){
                sendTriggerMsg('Window '+event,'resize');
            }

            log('window','Trigger event: '+event);
            debouce(resize,16);
        }

        /* istanbul ignore next */  //Not testable in PhantomJS
        function tabVisible() {
            function resize(){
                sendTriggerMsg('Tab Visable','resize');
            }

            if('hidden' !== document.visibilityState) {
                log('document','Trigger event: Visiblity change');
                debouce(resize,16);
            }
        }

        function sendTriggerMsg(eventName,event){
            function isIFrameResizeEnabled(iframeId) {
                return  'parent' === settings[iframeId].resizeFrom &&
                        settings[iframeId].autoResize &&
                        !settings[iframeId].firstRun;
            }

            for (var iframeId in settings){
                if(isIFrameResizeEnabled(iframeId)){
                    trigger(eventName, event, document.getElementById(iframeId), iframeId);
                }
            }
        }

        function setupEventListeners(){
            addEventListener(window,'message',iFrameListener);

            addEventListener(window,'resize', function(){resizeIFrames('resize');});

            addEventListener(document,'visibilitychange',tabVisible);
            addEventListener(document,'-webkit-visibilitychange',tabVisible); //Andriod 4.4
            addEventListener(window,'focusin',function(){resizeIFrames('focus');}); //IE8-9
            addEventListener(window,'focus',function(){resizeIFrames('focus');});
        }


        function factory(){
            function init(options,element){
                function chkType(){
                    if(!element.tagName) {
                        throw new TypeError('Object is not a valid DOM element');
                    } else if ('IFRAME' !== element.tagName.toUpperCase()) {
                        throw new TypeError('Expected <IFRAME> tag, found <'+element.tagName+'>');
                    }
                }

                if(element) {
                    chkType();
                    setupIFrame(element, options);
                    iFrames.push(element);
                }
            }

            function warnDeprecatedOptions(options) {
                if (options && options.enablePublicMethods) {
                    warn('enablePublicMethods option has been removed, public methods are now always available in the iFrame');
                }
            }

            var iFrames;

            setupRequestAnimationFrame();
            setupEventListeners();

            return function iFrameResizeF(options,target){
                iFrames = []; //Only return iFrames past in on this call

                warnDeprecatedOptions(options);

                switch (typeof(target)){
                case 'undefined':
                case 'string':
                    Array.prototype.forEach.call(
                        document.querySelectorAll( target || 'iframe' ),
                        init.bind(undefined, options)
                    );
                    break;
                case 'object':
                    init(options,target);
                    break;
                default:
                    throw new TypeError('Unexpected data type ('+typeof(target)+')');
                }

                return iFrames;
            };
        }

        function createJQueryPublicMethod($){
            if (!$.fn) {
                info('','Unable to bind to jQuery, it is not fully loaded.');
            } else if (!$.fn.iFrameResize){
                $.fn.iFrameResize = function $iFrameResizeF(options) {
                    function init(index, element) {
                        setupIFrame(element, options);
                    }

                    return this.filter('iframe').each(init).end();
                };
            }
        }

        if (window.jQuery) { createJQueryPublicMethod(window.jQuery); }

        if (typeof define === 'function' && define.amd) {
            define([],factory);
        } else if (typeof module === 'object' && typeof module.exports === 'object') { //Node for browserfy
            module.exports = factory();
        } else {
            window.iFrameResize = window.iFrameResize || factory();
        }

    })();

     </script>

     <script type="text/javascript" src="{!JSENCODE(ctiFileHost)}/{!IF(ctiUITheme=='slds'||ctiUITheme=='freedom','bundle.js','empty.js')}"></script>

</apex:page>